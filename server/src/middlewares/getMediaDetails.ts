import { spawn } from "child_process";

// Generated by https://quicktype.io

export interface MediaInfo {
  streams: Stream[];
  format: Format;
}

export interface Format {
  filename: string;
  nb_streams: number;
  nb_programs: number;
  format_name: string;
  format_long_name: string;
  start_time: string;
  duration: string;
  size: string;
  bit_rate: string;
  probe_score: number;
  tags: FormatTags;
}

export interface FormatTags {
  major_brand: string;
  minor_version: string;
  compatible_brands: string;
}

export interface Stream {
  index: number;
  codec_name: string;
  codec_long_name: string;
  profile: string;
  codec_type: string;
  codec_tag_string: string;
  codec_tag: string;
  width: number;
  height: number;
  coded_width: number;
  coded_height: number;
  closed_captions: number;
  film_grain: number;
  has_b_frames: number;
  sample_aspect_ratio: string;
  display_aspect_ratio: string;
  pix_fmt: string;
  level: number;
  chroma_location: string;
  field_order: string;
  refs: number;
  is_avc: string;
  nal_length_size: string;
  id: string;
  r_frame_rate: string;
  avg_frame_rate: string;
  time_base: string;
  start_pts: number;
  start_time: string;
  duration_ts: number;
  duration: string;
  bit_rate: string;
  bits_per_raw_sample: string;
  nb_frames: string;
  extradata_size: number;
  disposition: { [key: string]: number };
  tags: StreamTags;
}

export interface StreamTags {
  language: string;
  handler_name: string;
  vendor_id: string;
}

function getMediaDetails(filepath: string) {
  return new Promise<MediaInfo | string>((resolve, reject) => {
    if (!filepath) {
      reject(new Error("No file path provided"));
    }
    const ffprobe = spawn("ffprobe", [
      "-v",
      "quiet",
      "-print_format",
      "json",
      "-show_format",
      "-show_streams",
      "-i",
      filepath,
    ]);

    let buff: MediaInfo | string = "";

    ffprobe.stdout.on("data", (data) => {
      buff += data.toString();
    });

    ffprobe.on("close", (code) => {
      if (code === 0) {
        try {
          resolve(buff as MediaInfo);
        } catch (error) {
          reject(new Error("Error parsing FFprobe output: " + error));
        }
      } else {
        reject(new Error("FFprobe process exited with code: " + code));
      }
    });

    ffprobe.on("error", (err) => {
      reject(err);
    });
  });
}

export default getMediaDetails;
